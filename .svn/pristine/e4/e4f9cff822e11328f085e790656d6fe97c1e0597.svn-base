#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <dirent.h>
#include "freq_list.h"
#include "worker.h"

void sort_array(FreqRecord *freq){
	//if the first element is the null record or the second element is a null record
	if ((freq[0].freq == 0) || (freq[1].freq == 0)){
	//return NULL
	return;
	}
	//otherwise move all the records into ascending order 
	int index = 1; 
    while (index < MAXRECORDS && freq[index].freq != 0) {
		//keep a record of the current record
        FreqRecord curr_record = freq[index];
        int freq_to_sort = index -1; 
        while (freq_to_sort >= 0 && freq[freq_to_sort].freq < curr_record.freq) {
            freq[freq_to_sort + 1] = freq[freq_to_sort]; 
            freq_to_sort = freq_to_sort - 1; 
        } 
        freq[freq_to_sort + 1] = curr_record; 
        index++; 
    }
	
}

//The function get_word should be added to this file 
FreqRecord* get_word(Node *head, char *word, char **filename){
		// create an array of frequency records
		FreqRecord *frequencyRecord = malloc(MAXFILES*sizeof(FreqRecord));
		//check if malloc failed
		if (frequencyRecord == NULL){
			perror("malloc failed");
		}
		
		//create a node item forinput head
		Node *current = head;
		// create trackers for the index of the last record and for 
		int index = 0;
		int indexoffreqrec = 0;
		//while we still have words to go through
//                printf("  get_word before loop iofr:%d\n",indexoffreqrec);
		while (current != NULL){
//			printf("                                                                                  c_word: >%s<\n",current->word);
    //                    printf("                                                                                    word: >%s<\n",word);
  //         		printf("  get_word in loop iofr:%d\n",indexoffreqrec);
			//if we found the word
			if (strcmp(current -> word , word) == 0){
			index = 0;
				//printf("      %s\n","in if");
				while(index < MAXFILES){
//                                	printf("      %s\n","in inner while");
					if (current -> freq[index] != 0){
  //                              		printf("      %s\n","in inner if");
						// input the needed information and increment the checkers
						frequencyRecord[indexoffreqrec].freq = current -> freq[index];
						strcpy(frequencyRecord[indexoffreqrec].filename, filename[index]);
						indexoffreqrec++;
					}
					index++;
				}
				// when we exit this loop we break cause we found the one word in the list
				break;
			}
			else{
    //                            printf("      %s\n","in else");
				//if the current word is not what we wanted we move to the next word
				current = current -> next;
			}
			// additional way of exiting loop
			//current = NULL;
		}
//		printf("  get_word after loop iofr:%d\n",indexoffreqrec);
		//add a frequency record with the last item be 0 to the end
		frequencyRecord[indexoffreqrec].freq = 0;
		return frequencyRecord;
	}


/* Print to standard output the frequency records for a word.
* Used for testing.
*/
void print_freq_records(FreqRecord *frp) {
//	printf("   %s\n","PFR starting");
	int i = 0;
	while(frp != NULL && frp[i].freq != 0) {
//		printf("   i: %d\n",i);
		printf("%d    %s\n", frp[i].freq, frp[i].filename);
		i++;
	}
  //      printf("   %s\n","PFR done");
} 

/* run_worker
* - load the index found in dirname
* - read a word from the file descriptor "in"
* - find the word in the index list
* - write the frequency records to the file descriptor "out"
*/
void run_worker(char *dirname, int in, int out){
//	printf("%s\n","run worker entered");
// 	create a enpty linked list called curr for current node
	Node *curr = NULL;
	// create a list that contains all the words we need
	char word_list[PATHLENGTH];
	// create an array that will hold the names of the files
	char file_name_list[PATHLENGTH];
	// name an empty array of file names
	char **filenames = init_filenames();
	//create a buffer to store the data from in
	char buffer[MAXWORD];
	//add the directory name
//	printf("%s\n","make worker vars");
	strcpy(word_list, dirname);
	strcpy(file_name_list, dirname);
	strcat(file_name_list, "/filenames");
	strcat(word_list, "/index");
//	printf("%s\n","cated file extensions"); 
	// populate the curr linked list and the filenames list
	read_list(word_list, file_name_list, &curr, filenames);
//	printf("%s\n","read list"); 
	// get the data from in and load it into buffer but stay within the max character limit
//	printf("%s\n","got read data"); 
	int last_index = read(in, buffer, MAXWORD);
	buffer[last_index -1] = '\n';
	FreqRecord *freq = get_word(curr, buffer, filenames);
	print_freq_records(freq);
//	printf("%s\n","got word"); 
//	printf("%s\n","printed records");
	int index = 0;
    	while (freq -> freq != 0) {
        	close(in);
        //	write(out, &freq, sizeof(FreqRecord));
        //print_freq_records(freq);
        	index++;
    } 
} 

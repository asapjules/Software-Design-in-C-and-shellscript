#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lists.h"
#include <errno.h>

/* Add a group with name group_name to the group_list referred to by
* group_list_ptr. The groups are ordered by the time that the group was
* added to the list with new groups added to the end of the list.
*
* Returns 0 on success and -1 if a group with this name already exists.
*
* (I.e, allocate and initialize a Group struct, and insert it
* into the group_list. Note that the head of the group list might change
* which is why the first argument is a double pointer.)
*/
int add_group(Group **group_list_ptr, const char *group_name) {
	Group *new_group;
	new_group = (Group*) malloc(sizeof(Group));
	if (new_group == NULL){
		perror("malloc");
		exit(1);
	}
	new_group -> name = malloc(strlen(group_name)+1);
	printf("f");
	strcpy(new_group -> name,group_name);
	new_group -> users = NULL;
	new_group -> xcts = NULL;
	new_group -> next = NULL;
	Group* curr_group = *group_list_ptr;
	while (curr_group != NULL){
		printf("i");
		if (curr_group -> name == NULL){
			curr_group->next = new_group;
			return 0;
		}else if (strcmp(curr_group -> name, new_group->name) == 0 ){
			return (-1);
		curr_group = curr_group-> next;
	curr_group-> next = new_group;
    return 0;
}

/* Print to standard output the names of all groups in group_list, one name
*  per line. Output is in the same order as group_list.
*/
void list_groups(Group *group_list) {
	Group* curr_group = group_list;
	if (curr_group == NULL){
		printf("The group list is empty");
		return ;

	printf("The groups in the list are:");
	while (curr_group->next != NULL){
		printf("%s/n", curr_group-> name);
}

/* Search the list of groups for a group with matching group_name
* If group_name is not found, return NULL, otherwise return a pointer to the
* matching group list node.
*/
Group *find_group(Group *group_list, const char *group_name) {
    Group* list_of_groups = group_list;
	if (list_of_groups == NULL){
		return NULL;
	}
	while (list_of_groups->name != NULL){
		if (strcmp(list_of_groups -> name, group_name) == 0 ){
			return list_of_groups;
		}
		list_of_groups = list_of_groups-> next;
	return NULL;
}

/* Add a new user with the specified user name to the specified group. Return zero
* on success and -1 if the group already has a user with that name.
* (allocate and initialize a User data structure and insert it into the
* appropriate group list)
*/
int add_user(Group *group, const char *user_name) {
	User *user;
	user = (User*) malloc(sizeof(User));
	strcpy(user -> name,user_name);
	user -> balance = 0;
	user -> next = NULL;
	User *user_list = group -> users;
	if (group == NULL){
		return -1;
	if (user_list == NULL){
	group -> users = user;}
	while (user_list != NULL){
		if (strcmp(userlist -> name, user_name) == 0){
		return -1;}

		else if (userlist->next == NULL){
			userlist -> next = user;
			return 0;

		userlist = userlist -> next ;
	user_list -> next = user;
    return 0;
}

/* Remove the user with matching user and group name and
* remove all her transactions from the transaction list.
* Return 0 on success, and -1 if no matching user exists.
* Remember to free memory no longer needed.
* (Wait on implementing the removal of the user's transactions until you
* get to Part III below, when you will implement transactions.)
*/
int remove_user(Group *group, const char *user_name) {
	User *user_list = group -> users;
	if (user_list == NULL){
		return -1;
	User *prev_user = find_prev_user(group, user_name);
	if (prev_user == NULL){
        return -1;
	}
    else if (prev_user != NULL){
        User *delete_user = prev_user -> next;
        prev_user -> next = delete_user ->next;
        free(delete_user);
        delete_user = NULL;
    }
    return 0;
}

/* Print to standard output the names of all the users in group, one
* per line, and in the order that users are stored in the list, namely
* lowest payer first.
*/
void list_users(Group *group) {
	User *user_list = group -> users;
	if (user_list == NULL){
		printf("There are no users in this group");
	else{
		printf("the users in the group are:");
		while (user_list != NULL){
			printf(%s/n, user_list -> next);
			user_list = user_list -> next;
}
/* Print to standard output the balance of the specified user. Return 0
* on success, or -1 if the user with the given name is not in the group.
*/
int user_balance(Group *group, const char *user_name) {
	User *user_list = group -> users;
	if (user_list == NULL){
		return -1;
	else{
		User *prev_user = find_prev_user( group, user_name)
		if (prev_user = NULL){
			return -1;
		else if (prev_user != NULL){
			int *user_balance = prev_user -> next -> balance;
			printf(%d, user_balance);
    return 0;
}

/* Print to standard output the name of the user who has paid the least
* If there are several users with equal least amounts, all names are output.
* Returns 0 on success, and -1 if the list of users is empty.
* (This should be easy, since your list is sorted by balance).
*/
int under_paid(Group *group) {
	User *user_list = group -> users;
	if (user_list == NULL){
		return -1;
	else{
		lowest_bal = user_list -> balance;
		while (user_list -> balance == lowest_bal){
			printf("%s", user_list -> name);
			user_list = user_list -> next;
    return 0;
}

/* Return a pointer to the user prior to the one in group with user_name. If
* the matching user is the first in the list (i.e. there is no prior user in
* the list), return a pointer to the matching user itself. If no matching user
* exists, return NULL.
*
* The reason for returning the prior user is that returning the matching user
* itself does not allow us to change the user that occurs before the
* matching user, and some of the functions you will implement require that
* we be able to do this.
*/
User *find_prev_user(Group *group, const char *user_name) {
	if (group == NULL){
		return NULL;
    else if (group -> users == NULL){
        return NULL;
    }
    else if (group -> users != NULL){
        User *curr_user = group -> user;
        if (curr_user -> next == NULL){
            return curr_user;
        }
        else{
                while (curr_user -> next != NULL){
                    if (strcmp(curr_user -> next -> name, user_name){
                        return curr_user;
                        }
                    curr_user = curr_user -> next;
                }
                return NULL;
        }
    }
}

/* Add the transaction represented by user_name and amount to the appropriate
* transaction list, and update the balances of the corresponding user and group.
* Note that updating a user's balance might require the user to be moved to a
* different position in the list to keep the list in sorted order. Returns 0 on
* success, and -1 if the specified user does not exist.
*/
int add_xct(Group *group, const char *user_name, double amount) {
    return 0;
}

/* Print to standard output the num_xct most recent transactions for the
* specified group (or fewer transactions if there are less than num_xct
* transactions posted for this group). The output should have one line per
* transaction that prints the name and the amount of the transaction. If
* there are no transactions, this function will print nothing.
*/
void recent_xct(Group *group, long nu_xct) {
}

/* Remove all transactions that belong to the user_name from the group's
* transaction list. This helper function should be called by remove_user.
* If there are no transactions for this user, the function should do nothing.
* Remember to free memory no longer needed.
*/
void remove_xct(Group *group, const char *user_name) {
}

